[version]
schema = "1"
updated = "2025-09-12"

# =========================
# C / C++
# =========================

[[library]]
name = "OpenSSL"
languages = ["C", "C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<openssl/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bEVP_[A-Za-z0-9_]+\\s*\\(",
  "\\bRSA_[A-Za-z0-9_]+\\s*\\(",
  "\\bEC_KEY_[A-Za-z0-9_]+\\s*\\(",
  "\\bECDSA_[A-Za-z0-9_]+\\s*\\(",
  "\\bED25519_[A-Za-z0-9_]+\\s*\\(",
  "\\bX509_[A-Za-z0-9_]+\\s*\\(",
  "\\bPKCS\\d_[A-Za-z0-9_]+\\s*\\(",
]

[[library]]
name = "libsodium"
languages = ["C", "C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<sodium(?:/[^>]+)?>",
]
apis = [
  "\\bcrypto_secretbox_(?:easy|open_easy)\\s*\\(",
  "\\bcrypto_aead_chacha20poly1305_ietf_(?:encrypt|decrypt)\\s*\\(",
  "\\bcrypto_aead_xchacha20poly1305_ietf_(?:encrypt|decrypt)\\s*\\(",
  "\\bcrypto_auth(?:_verify)?\\s*\\(",
  "\\bcrypto_sign_(?:detached|verify_detached)\\s*\\(",
  "\\bcrypto_generichash\\s*\\(",
  "\\bcrypto_scalarmult\\s*\\(",
]

[[library]]
name = "Libgcrypt"
languages = ["C", "C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<gcrypt\\.h>",
]
apis = [
  "\\bgcry_[A-Za-z0-9_]+\\s*\\(",
]

[[library]]
name = "MbedTLS"
languages = ["C", "C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<mbedtls/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bmbedtls_[A-Za-z0-9_]+\\s*\\(",
]

[[library]]
name = "wolfSSL/wolfCrypt"
languages = ["C", "C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<wolfssl/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bwc_[A-Za-z0-9_]+\\s*\\(",
]

[[library]]
name = "Crypto++"
languages = ["C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<cryptopp/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bCryptoPP::[A-Za-z0-9_:]+\\s*\\(",
  "\\bCryptoPP::[A-Za-z0-9_:]+\\b", # namespace/class use
]

[[library]]
name = "Botan"
languages = ["C++"]
[library.patterns]
include = [
  "^\\s*#\\s*include\\s*<botan/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bBotan::[A-Za-z0-9_:]+\\s*\\(",
  "\\bBotan::[A-Za-z0-9_:]+\\b",
]

# =========================
# Java
# =========================

[[library]]
name = "Java JCA/JCE"
languages = ["Java"]
[library.patterns]
include = [
  "^\\s*import\\s+javax\\.crypto\\.",
  "^\\s*import\\s+java\\.security\\.",
]
apis = [
  "\\b(?:Cipher|MessageDigest|Signature|KeyPairGenerator)\\.getInstance\\s*\\(",
  "\\bKeyFactory\\.getInstance\\s*\\(",
  "\\bKeyAgreement\\.getInstance\\s*\\(",
]

[[library]]
name = "BouncyCastle"
languages = ["Java"]
[library.patterns]
include = [
  "^\\s*import\\s+org\\.bouncycastle\\.",
]
apis = [
  "\\borg\\.bouncycastle\\.[A-Za-z0-9_.]+\\b",
  "\\bnew\\s+org\\.bouncycastle\\.[A-Za-z0-9_.]+\\s*\\(",
]

[[library]]
name = "Google Tink (Java)"
languages = ["Java"]
[library.patterns]
include = [
  "^\\s*import\\s+com\\.google\\.crypto\\.tink\\.",
]
apis = [
  "\\bTinkConfig\\.register\\s*\\(",
  "\\b(?:Aead|Mac|HybridDecrypt|HybridEncrypt|PublicKeySign|PublicKeyVerify)\\b",
]

[[library]]
name = "Conscrypt"
languages = ["Java"]
[library.patterns]
include = [
  "^\\s*import\\s+org\\.conscrypt\\.",
]
apis = [
  "\\bConscrypt\\.newProvider\\s*\\(",
  "\\bOpenSSLProvider\\b",
]

# =========================
# Go
# =========================

[[library]]
name = "Go std crypto"
languages = ["Go"]
[library.patterns]
include = [
  "^\\s*import\\s*(?:\\(.*\\)|)\\s*[\\s\\S]*?\"crypto/(?:aes|des|rc4|sha\\d*|md5|rsa|ecdsa|ed25519|x509|rand|tls)\"",
]
apis = [
  "\\bcrypto\\.[A-Z][A-Za-z0-9_]*\\b",
]

[[library]]
name = "golang.org/x/crypto"
languages = ["Go"]
[library.patterns]
include = [
  "^\\s*import\\s*(?:\\(.*\\)|)\\s*[\\s\\S]*?\"golang\\.org/x/crypto/",
]
apis = [
  "\\bx?crypto\\b", # weak signal; primary detection via import above
]

[[library]]
name = "Google Tink (Go)"
languages = ["Go"]
[library.patterns]
include = [
  "^\\s*import\\s*(?:\\(.*\\)|)\\s*[\\s\\S]*?\"github\\.com/google/tink/go/",
]
apis = [
  "\\btink\\/[A-Za-z0-9_/]+\\b",
]

# =========================
# Rust
# =========================

[[library]]
name = "ring"
languages = ["Rust"]
[library.patterns]
include = [
  "\\bextern\\s+crate\\s+ring\\b",
  "\\buse\\s+ring::",
  "\\bring::[A-Za-z0-9_]+::",
]
apis = [
  "\\bring::[A-Za-z0-9_:]+\\b",
]

[[library]]
name = "openssl (Rust)"
languages = ["Rust"]
[library.patterns]
include = [
  "\\bextern\\s+crate\\s+openssl\\b",
  "\\buse\\s+openssl::",
  "\\bopenssl::[A-Za-z0-9_]+::",
]
apis = [
  "\\bopenssl::[A-Za-z0-9_:]+\\b",
]

[[library]]
name = "RustCrypto (common crates)"
languages = ["Rust"]
[library.patterns]
include = [
  "\\buse\\s+(?:aes|aes_gcm|chacha20|chacha20poly1305|poly1305|sha1|sha2|sha3|blake2|blake3|ed25519_dalek|curve25519_dalek|argon2|scrypt)[A-Za-z0-9_:]*",
]
apis = [
  "\\b(?:aes_gcm|chacha20poly1305|sha2|sha3|blake3|ed25519_dalek|curve25519_dalek)::[A-Za-z0-9_:]+\\b",
]

# =========================
# Swift
# =========================

[[library]]
name = "CryptoKit"
languages = ["Swift"]
[library.patterns]
include = [
  "^\\s*import\\s+CryptoKit\\b",
]
apis = [
  "\\b(SHA(?:256|384|512)|HMAC|ChaChaPoly|AES\\.GCM|Curve25519)\\b",
]

[[library]]
name = "CommonCrypto (Swift)"
languages = ["Swift"]
[library.patterns]
include = [
  "^\\s*import\\s+CommonCrypto\\b",
]
apis = [
  "\\bCC_(?:Crypt|SHA(?:1|224|256|384|512)|MD5|KeyDerivation|Random)[A-Za-z0-9_]*\\s*\\(",
]

[[library]]
name = "CryptoSwift"
languages = ["Swift"]
[library.patterns]
include = [
  "^\\s*import\\s+CryptoSwift\\b",
]
apis = [
  "\\bAES\\s*\\(",
  "\\bChaCha20\\s*\\(",
  "\\bPoly1305\\b",
  "\\bHMAC\\b",
  "\\bSHA(?:1|224|256|384|512)\\b",
]

[[library]]
name = "Swift-Sodium"
languages = ["Swift"]
[library.patterns]
include = [
  "^\\s*import\\s+Sodium\\b",
]
apis = [
  "\\bSodium\\s*\\(",
  "\\bsodium\\.[A-Za-z0-9_]+\\b",
]

# =========================
# Kotlin
# =========================

[[library]]
name = "JCA/JCE (Kotlin)"
languages = ["Kotlin"]
[library.patterns]
include = [
  "^\\s*import\\s+(?:javax\\.crypto\\.|java\\.security\\.)",
]
apis = [
  "\\b(?:Cipher|MessageDigest|Signature|KeyPairGenerator)\\.getInstance\\s*\\(",
  "\\bKeyFactory\\.getInstance\\s*\\(",
  "\\bKeyAgreement\\.getInstance\\s*\\(",
]

[[library]]
name = "BouncyCastle (Kotlin)"
languages = ["Kotlin"]
[library.patterns]
include = [
  "^\\s*import\\s+org\\.bouncycastle\\.",
]
apis = [
  "\\borg\\.bouncycastle\\.[A-Za-z0-9_.]+\\b",
]

[[library]]
name = "Korlibs Krypto (Kotlin MPP)"
languages = ["Kotlin"]
[library.patterns]
include = [
  "^\\s*import\\s+com\\.soywiz\\.krypto\\.",
]
apis = [
  "\\bcom\\.soywiz\\.krypto\\.[A-Za-z0-9_.]+\\b",
]

# =========================
# Python
# =========================

[[library]]
name = "PyCA cryptography"
languages = ["Python"]
[library.patterns]
include = [
  "^\\s*from\\s+cryptography\\b",
  "^\\s*import\\s+cryptography\\b",
]
apis = [
  "\\bFernet\\(",
  "\\.encrypt\\(",
  "\\.decrypt\\(",
  "\\bAESGCM\\(",
  "\\bhmac\\.HMAC\\(",
  "\\.finalize\\(",
  "\\.verify\\(",
  "\\.sign\\(",
]

[[library]]
name = "PyCryptodome"
languages = ["Python"]
[library.patterns]
include = [
  "^\\s*from\\s+Crypto\\b",
  "^\\s*import\\s+Crypto\\b",
]
apis = [
  "\\bCrypto\\.Cipher\\.AES\\.new\\(",
  "\\.encrypt\\(",
  "\\.decrypt\\(",
  "\\bCrypto\\.Hash\\.HMAC\\.new\\(",
  "\\bCrypto\\.Signature\\.pkcs1_15\\.new\\(.*\\)\\.sign\\(",
  "\\bCrypto\\.Signature\\.pkcs1_15\\.new\\(.*\\)\\.verify\\(",
]

[[library]]
name = "PyNaCl"
languages = ["Python"]
[library.patterns]
include = [
  "^\\s*from\\s+nacl\\b",
  "^\\s*import\\s+nacl\\b",
  "^\\s*from\\s+nacl\\.signing\\b",
  "^\\s*from\\s+nacl\\.secret\\b",
  "^\\s*from\\s+nacl\\.encoding\\b",
  "^\\s*from\\s+nacl\\.hash\\b",
  "^\\s*from\\s+nacl\\.pwhash\\b",
]
apis = [
  "\\bnacl\\.secret\\.SecretBox",
  "\\bnacl\\.signing\\.SigningKey",
  "\\bnacl\\.signing\\.VerifyKey",
  "\\bnacl\\.encoding\\.",
  "\\bnacl\\.hash\\.",
  "\\bnacl\\.pwhash\\.",
  "\\bnacl\\.hashlib\\.",
  "\\bSigningKey\\.generate\\(",
  "\\bSigningKey\\.sign\\(",
  "\\bVerifyKey\\.verify\\(",
  "\\bSignedMessage\\.",
  "\\.encrypt\\(",
  "\\.decrypt\\(",
  "\\.sign\\(",
  "\\.verify\\(",
  "\\bHexEncoder",
  "\\bBase64Encoder",
]

# =========================
# PHP
# =========================

[[library]]
name = "OpenSSL (PHP)"
languages = ["PHP"]
[library.patterns]
include = []
apis = [
  "\\bopenssl_[a-z0-9_]+\\s*\\(",
]

[[library]]
name = "Sodium (PHP)"
languages = ["PHP"]
[library.patterns]
include = []
apis = [
  "\\bsodium_[a-z0-9_]+\\s*\\(",
]

[[library]]
name = "phpseclib"
languages = ["PHP"]
[library.patterns]
include = [
  "^\\s*use\\s+phpseclib\\d*\\\\Crypt\\\\",
]
apis = [
  "\\bnew\\s+\\\\?phpseclib\\d*\\\\Crypt\\\\[A-Za-z0-9_]+\\s*\\(",
  "\\bnew\\s+Crypt_[A-Z][A-Za-z0-9_]*\\s*\\(", # legacy v2
]

[[library]]
name = "Halite (ParagonIE)"
languages = ["PHP"]
[library.patterns]
include = [
  "^\\s*use\\s+ParagonIE\\\\Halite\\\\",
]
apis = [
  "\\bParagonIE\\\\Halite\\\\[A-Za-z0-9_\\\\]+::[A-Za-z0-9_]+\\s*\\(",
]

# =========================
# Objective-C: Apple/Common
# =========================

[[library]]
name = "CommonCrypto (Objective-C)"
languages = ["Objective-C"]
[library.patterns]
include = [
  "^\\s*#\\s*(?:import|include)\\s*<CommonCrypto\\/[A-Za-z0-9_]+\\.h>",
  "^\\s*@import\\s+CommonCrypto\\b",
]
apis = [
  "\\bCCCrypt\\s*\\(",
  "\\bCCCryptor(?:Create|Update|Final|Release)\\s*\\(",
  "\\bCCHmac\\s*\\(",
  "\\bCC_SHA(?:1|224|256|384|512)\\s*\\(",
  "\\bCC_MD5\\s*\\(",
  "\\bCCKeyDerivationPBKDF\\s*\\(",
  "\\bCCRandomGenerateBytes\\s*\\(",
]

[[library]]
name = "Security.framework (Objective-C)"
languages = ["Objective-C"]
[library.patterns]
include = [
  "^\\s*#\\s*(?:import|include)\\s*<Security\\/Security\\.h>",
  "^\\s*@import\\s+Security\\b",
]
apis = [
  "\\bSecKeyCreateRandomKey\\s*\\(",
  "\\bSecKeyCreateEncryptedData\\s*\\(",
  "\\bSecKeyCreateDecryptedData\\s*\\(",
  "\\bSecKeyCreateSignature\\s*\\(",
  "\\bSecKeyVerifySignature\\s*\\(",
  "\\bSecRandomCopyBytes\\s*\\(",
]

# =========================
# Objective-C: Third-party C libs used from Obj-C
# =========================

[[library]]
name = "OpenSSL (Objective-C)"
languages = ["Objective-C"]
[library.patterns]
include = [
  "^\\s*#\\s*(?:import|include)\\s*<openssl/[A-Za-z0-9_./-]+>",
]
apis = [
  "\\bEVP_[A-Za-z0-9_]+\\s*\\(",
  "\\bRSA_[A-Za-z0-9_]+\\s*\\(",
  "\\bECDSA_[A-Za-z0-9_]+\\s*\\(",
  "\\bEC_KEY_[A-Za-z0-9_]+\\s*\\(",
  "\\bX509_[A-Za-z0-9_]+\\s*\\(",
  "\\bPKCS\\d_[A-Za-z0-9_]+\\s*\\(",
]

[[library]]
name = "libsodium (Objective-C)"
languages = ["Objective-C"]
[library.patterns]
include = [
  "^\\s*#\\s*(?:import|include)\\s*<sodium(?:/[^>]+)?>",
]
apis = [
  "\\bcrypto_secretbox_(?:easy|open_easy)\\s*\\(",
  "\\bcrypto_aead_(?:x?chacha20poly1305_ietf|aes256gcm)_(?:encrypt|decrypt)\\s*\\(",
  "\\bcrypto_sign_(?:detached|verify_detached)\\s*\\(",
  "\\bcrypto_generichash\\s*\\(",
  "\\bcrypto_scalarmult\\s*\\(",
]

# =========================
# Objective-C: High-level but still primitive APIs
# =========================

[[library]]
name = "Google Tink (Objective-C)"
languages = ["Objective-C"]
[library.patterns]
include = [
  "^\\s*@import\\s+Tink\\b",
  "^\\s*#\\s*import\\s*<Tink\\/[A-Za-z0-9_]+\\.h>",
  "^\\s*#\\s*import\\s*\"objc\\/TINK[A-Za-z0-9_]+\\.h\"",
]
apis = [
  "\\bTINK(?:Aead|Mac|Hybrid(?:Encrypt|Decrypt)|PublicKey(?:Sign|Verify)|KeysetHandle|Config)\\b",
  "\\b\\[TINK[A-Za-z0-9_]+Factory\\s+[A-Za-z0-9_]+WithKeysetHandle:.*\\]",
]
# =========================
# Erlang / OTP primitives
# =========================

[[library]]
name = "Erlang/OTP crypto"
languages = ["Erlang"]
[library.patterns]
# Detect explicit imports of the module (rare but possible)
include = [
  "^\\s*-import\\s*\\(\\s*crypto\\s*,\\s*\\[",
]
# Detect canonical crypto primitives with module-qualified calls
apis = [
  "\\bcrypto:(?:hash|hash_init|hash_update|hash_final)\\s*\\(",
  "\\bcrypto:(?:mac|mac_init|mac_update|mac_final)\\s*\\(",
  "\\bcrypto:crypto_(?:init|update|final|one_time(?:_aead)?(?:_init)?)\\s*\\(",
  "\\bcrypto:(?:compute_key|generate_key)\\s*\\(",
  "\\bcrypto:pbkdf2_hmac\\s*\\(",
  "\\bcrypto:rand_seed(?:_alg)?\\s*\\(",
  "\\bcrypto:hash_xof\\s*\\(",
]

[[library]]
name = "Erlang/OTP public_key"
languages = ["Erlang"]
[library.patterns]
# Record/include line commonly present when using PKI/ASN.1 records
include = [
  "^\\s*-include_lib\\s*\\(\\s*\"public_key/include/public_key\\.hrl\"\\s*\\)",
  "^\\s*-import\\s*\\(\\s*public_key\\s*,\\s*\\[",
]
apis = [
  "\\bpublic_key:(?:sign|verify)\\s*\\(",
  "\\bpublic_key:(?:encrypt_public|decrypt_private|encrypt_private|decrypt_public)\\s*\\(",
  "\\bpublic_key:(?:pem_decode|pem_entry_decode|der_decode|der_encode)\\s*\\(",
  "\\bpublic_key:(?:compute_key|generate_key)\\s*\\(",
]

# =========================
# Third-party primitive libs
# =========================

[[library]]
name = "enacl (libsodium/NaCl)"
languages = ["Erlang"]
[library.patterns]
include = [
  "^\\s*-import\\s*\\(\\s*enacl\\s*,\\s*\\[",
]
apis = [
  "\\benacl:(?:secretbox|box(?:_open)?|box_(?:beforenm|afternm|keypair)|box_seal(?:_open)?)\\s*\\(",
  "\\benacl:aead_(?:x?chacha20poly1305_ietf)_(?:encrypt|decrypt)\\s*\\(",
  "\\benacl:(?:generichash(?:_init|_update|_final)?|hash)\\s*\\(",
  "\\benacl:(?:crypto_sign_ed25519_(?:keypair|sk_to_pk|public_to_curve25519|secret_to_curve25519))\\s*\\(",
  "\\benacl:(?:curve25519_scalarmult(?:_base)?)\\s*\\(",
  "\\benacl:(?:pwhash|pwhash_str_verify)\\s*\\(",
  "\\benacl:randombytes(?:_uniform|_uint32)?\\s*\\(",
]

[[library]]
name = "bcrypt (Erlang)"
languages = ["Erlang"]
[library.patterns]
include = [
  "^\\s*-import\\s*\\(\\s*bcrypt\\s*,\\s*\\[",
]
apis = [
  "\\bbcrypt:(?:gen_salt|hashpw|checkpw)\\s*\\(",
]
